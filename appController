const {
  fetchTopics,
  fetchAllArticles,
  fetchArticleByID,
  fetchArticleComments,
  postComment,
  checkUsernameExist,
  patchVotes,
  fetchUsers,
} = require("./models");

const getAPI = (request, response, next) => {
  return response.status(200).send({ msg: "We have connected successfully" });
};

const getTopics = (request, response, next) => {
  fetchTopics()
    .then((topics) => {
      return response.status(200).send({ topics });
    })
    .catch((error) => {
      next(error);
    });
};

const getAllArticles = (request, response, next) => {
  fetchAllArticles()
    .then((allArticle) => {
      response.status(200).send({ articles: allArticle });
    })
    .catch((error) => {
      next(error);
    });
};

const getArticleID = (request, response, next) => {
  const { article_id } = request.params;
  fetchArticleByID(article_id)
    .then((result) => {
      response.status(200).send({ articles: result });
    })
    .catch((error) => {
      next(error);
    });
};

const getArticleComments = (request, response, next) => {
  const { article_id } = request.params;
  fetchArticleByID(article_id)
    .then((result) => {
      return fetchArticleComments(article_id);
    })
    .then((comments) => {
      //console.log(comments);
      response.status(200).send({ comments });
    })
    .catch((error) => {
      next(error);
    });
};

const postArticleComments = (request, response, next) => {
  const { article_id } = request.params;
  const { body } = request.body;
  const { username } = request.body;
  checkUsernameExist(username)
    .then(() => {
      return postComment(article_id, body, username);
    })
    .then((postedComment) => {
      response.status(201).send({ postedComment });
    })
    .catch((error) => {
      next(error);
    });
};

const updateVotes = (request, response, next) => {
  const { article_id } = request.params;
  const { inc_votes } = request.body;
  fetchArticleByID(article_id)
    .then(() => {
      return patchVotes(article_id, inc_votes);
    })
    .then((updatedVote) => {
      response.status(200).send({ updatedVote });
    })
    .catch((error) => {
      next(error);
    });
};

const getUsers = (request, response, next) => {
  //console.log("Hello");
  fetchUsers().then((users) => {
    response.status(200).send({ users });
  });
};

module.exports = {
  getAPI,
  getTopics,
  getAllArticles,
  getArticleID,
  getArticleComments,
  postArticleComments,
  updateVotes,
  getUsers,
};
